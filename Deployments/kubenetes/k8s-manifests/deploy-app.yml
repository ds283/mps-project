apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
  labels:
    app.kubernetes.io/name: webapp
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: webapp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: webapp
    spec:
      containers:
        - name: webapp
          image: mpsproject/webapp:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: "1"
            requests:
              cpu: "0.1"
          ports:
            - containerPort: 5000
          env:
            - name: REDIS_HOSTNAME
              value: redis
            - name: MONGODB_HOSTNAME
              value: mongodb
            - name: DATABASE_HOSTNAME
              value: mariadb
            - name: CELERY_RESULT_BACKEND
              value: redis://$(REDIS_HOSTNAME):6379
            - name: CELERY_BROKER_URL
              value: redis://$(REDIS_HOSTNAME):6379
            - name: CACHE_REDIS_URL
              value: redis://$(REDIS_HOSTNAME):6379
            - name: RATELIMIT_REDIS_URI
              value: redis://$(REDIS_HOSTNAME):6379
            # root password needed for backups; consider whether there is some alternative approach
            - name: DATABASE_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mariadb-credentials
                  key: root_password
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: mariadb-credentials
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mariadb-credentials
                  key: password
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: mariadb-credentials
                  key: database
            - name: DATABASE_URL
              value: mysql+pymysql://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOSTNAME)/$(DATABASE_NAME)
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: root_username
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-credentials
                  key: root_password
            - name: SESSION_MONGO_URL
              value: mongodb://$(MONGODB_USER):$(MONGODB_PASSWORD)@$(MONGODB_HOSTNAME):27017
            - name: BACKUP_FOLDER
              value: /backups
            - name: INSTANCE_FOLDER
              value: /instance
            # object storage should be directed to S3 or GCS bucket on a production cluster
            - name: OBJECT_STORAGE_ASSETS_URI
              value: file:///object_storage/assets
            - name: LOG_FILE
              value: /logs/mps_project.log
            - name: PROFILER_SQLITE_FILE
              value: /profiling/flask_profiler.sql
            - name: PROFILER_SQLITE_TABLE
              value: measurements
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
          volumeMounts:
            # would not be used in a production cluster, instead the object store would be a S3 or GCS bucket
            - mountPath: /object_storage
              name: mount-object-store
            # TODO: change backups to use an S3 or GCS bucket
            - mountPath: /backups
              name: mount-backups
            - mountPath: /instance
              name: mount-instance
            # would not be used in a production cluster
            - mountPath: /logs
              name: mount-logs
            - mountPath: /profiling
              name: mount-profiling
          livenessProbe:
            httpGet:
              path: /healthz/live
              port: 5000
            initialDelaySeconds: 5
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: 5000
            initialDelaySeconds: 10
            timeoutSeconds: 3
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      volumes:
        - name: mount-object-store
          persistentVolumeClaim:
            claimName: pvc-object-store
        - name: mount-backups
          persistentVolumeClaim:
            claimName: pvc-backups
        - name: mount-instance
          persistentVolumeClaim:
            claimName: pvc-instance
        - name: mount-logs
          persistentVolumeClaim:
            claimName: pvc-logs
        - name: mount-profiling
          persistentVolumeClaim:
            claimName: pvc-profiling
      restartPolicy: Always
