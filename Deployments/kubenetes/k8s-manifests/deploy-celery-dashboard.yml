apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-dashboard
  labels:
    app.kubernetes.io/name: celery-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: celery-dashboard
  template:
    metadata:
      labels:
        app.kubernetes.io/name: celery-dashboard
    spec:
      containers:
        - name: webapp
          image: mpsproject/webapp:latest
          imagePullPolicy: IfNotPresent
          command: ["./launch_flower.sh"]
          resources:
            requests:
              cpu: "0.1"
          env:
            - name: REDIS_HOSTNAME
              value: redis
            - name: MONGODB_HOSTNAME
              value: mongodb
            - name: DATABASE_HOSTNAME
              value: mariadb
            - name: CELERY_RESULT_BACKEND
              value: redis://$(REDIS_HOSTNAME):6379
            - name: CELERY_BROKER_URL
              value: redis://$(REDIS_HOSTNAME):6379
            - name: CACHE_REDIS_URL
              value: redis://$(REDIS_HOSTNAME):6379
            - name: RATELIMIT_REDIS_URI
              value: redis://$(REDIS_HOSTNAME):6379
            # root password needed for backups; consider whether there is some alternative approach
            - name: DATABASE_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mariadb-credentials
                  key: root_password
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  name: mariadb-credentials
                  key: username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mariadb-credentials
                  key: password
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: mariadb-credentials
                  key: database
            - name: DATABASE_URL
              value: mysql+pymysql://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOSTNAME)/$(DATABASE_NAME)
            - name: LOG_FILE
              value: /home/mpsproject/logs/mps_project.log
            - name: PROFILER_SQLITE_FILE
              value: /home/mpsproject/profiling/flask_profiler.sql
            - name: PROFILER_SQLITE_TABLE
              value: measurements
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 500
          volumeMounts:
            - mountPath: /home/mpsproject/app/instance
              name: mount-instance
            - mountPath: /home/mpsproject/logs
              name: mount-logs
            - mountPath: /home/mpsproject/profiling
              name: mount-profiling
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      volumes:
        - name: mount-instance
          persistentVolumeClaim:
            claimName: pvc-instance
        - name: mount-logs
          persistentVolumeClaim:
            claimName: pvc-logs
        - name: mount-profiling
          persistentVolumeClaim:
            claimName: pvc-profiling
      restartPolicy: Always
